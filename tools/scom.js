///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
///////////////////////////                         ///////////////////////////
////////////////////////////                      /////////////////////////////
//////////////////////////////                  ///////////////////////////////
////////////////////////////////              /////////////////////////////////
//////////////////////////////////          ///////////////////////////////////
////////////////////////////////////     //////////////////////////////////////
////////////////////////////////////// ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
let req_method = "";
var _srl_periodic_proc;


var PFX = "SRL  > ";


function toHex(v)
{
  var _v = 0;
  if ( v < 0 ) _v = 0xFFFFFFFF + v + 1;
  //return _v.toString(16).toUpperCase();
  return _v;
}
var seq = 0;


function PAD(n, width) {
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
}

function HEX(n)
{
  return n.toString(16).padStart(2, 0);
}




///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////                                                                   //////
//////                                                                   //////
//////                           Entry Point                             //////
//////                                                                   //////
//////                                                                   //////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*****************************************************************************/
/*****************************************************************************/
/*********************************        ************************************/
/*********************************        ************************************/
/*********************************        ************************************/
/*****************************                ********************************/
/*******************************            **********************************/
/*********************************        ************************************/
/************************************   **************************************/
/************************************* ***************************************/
/*****************************************************************************/
var common = require("./__common.js");



/******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
var sck = require("./out/liteio_socket_x86_64.node");
console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                               socket START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
sck_fd = sck.open("--socket_ip 127.0.0.1 --socket_port 50005 --socket_cstype CLENT --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048 --socket_callback_id 0 --socket_timeout 4000", sck_callback);

function sck_callback(fd, buf, sz)
{
  var dbg = "";

  if ( sz < 0 )
  {
    console.log(PFX + "sck_callback " + sz + ", " + toHex(sz));
    return;
  }

  if ( sz == undefined) return;
  if ( buf == undefined ) return;

  for ( i=0 ; i<sz ; i++ )
  {
    dbg += HEX(buf[i]) + " ";
  }

  console.log(PFX + "sck_callback(" , fd , "," , dbg , "," , sz , ")");


  //sck.write(sck_fd, buf, sz);


  return;
}


/******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
var srl = require("./out/liteio_serial_x86_64.node");
console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                               serial START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
srl_fd = srl.open("--serial_port COM23 --serial_baudrate 115200 --serial_size_of_buffer 1024", serial_callback);


function serial_callback(fd, buf, sz)
{
  var dbg = "";

  console.log(PFX + "serial_callback");

  if ( sz < 0 )
  {
    console.log(PFX + "serial_callback " + sz + ", " + toHex(sz));
    return;
  }
  if ( sz == undefined) return;
  if ( buf == undefined ) return;

  for ( i=0 ; i<sz ; i++ )
  {
    dbg += HEX(buf[i]) + " ";
  }

  console.log(PFX + "serial_callback(" , fd , "," , dbg , "," , sz , ")");

  console.log(PFX + "sck " + sck + ", " + sck_fd);

  err = sck.write(sck_fd, dbg, sz);
  console.log(PFX + err + " = sck.write( " + sck_fd + ", " + dbg + ", " + sz +")" );


  return;
}

/****
function srl_periodic_proc(obj)
{
  console.log(PFX + "write to serial");

  var  wsFrame = new Uint8Array(128);
  var  i = 0;
  var  sz = i;

  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;

  wsFrame[i] = 0x00; i++;


  console.log(PFX + "srl_fd : ", srl_fd);

  sz = i;
  err = srl.write(parseInt(srl_fd, 10), wsFrame.buffer, sz);

  console.log(PFX + err, " = srl.write : ", parseInt(srl_fd, 10));

  clearTimeout(_srl_periodic_proc)
  _srl_periodic_proc = setTimeout(srl_periodic_proc, 1000, obj);
}

console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                             PERIODIC START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
_srl_periodic_proc = setTimeout(srl_periodic_proc, 4000, 0);
****/

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/******************************************************************************/




/******************************************************************************
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////



var sck = require("./out/liteio_socket_x86_64.node");
console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                               socket START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
//sck_fd = sck.open("--socket_ip 127.0.0.1 --socket_port 49243 --socket_cstype CLENT --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048", sck_callback);
sck_fd = sck.open("--socket_ip 127.0.0.1 --socket_port 50005 --socket_cstype CLENT --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048", sck_callback);


function sck_callback(fd, buf, sz)
{

  return;
}

function sck_periodic_proc(obj)
{
  console.log("write to bsocket");

  var  wsFrame = new Uint8Array(128);
  var  i = 0;
  var  sz = i;

  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;

  wsFrame[i] = 0x00; i++;

  sz = i;
  err = sck.write(parseInt(sck_fd, 10), wsFrame.buffer, sz);
  console.log(err, " = sck.write : ", parseInt(sck_fd, 10));

  clearTimeout(_sck_periodic_proc)
  _sck_periodic_proc = setTimeout(sck_periodic_proc, 1000, obj);
}

console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                             PERIODIC START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
_sck_periodic_proc = setTimeout(sck_periodic_proc, 4000, 0);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
******************************************************************************/