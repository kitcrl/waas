///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
///////////////////////////                         ///////////////////////////
////////////////////////////                      /////////////////////////////
//////////////////////////////                  ///////////////////////////////
////////////////////////////////              /////////////////////////////////
//////////////////////////////////          ///////////////////////////////////
////////////////////////////////////     //////////////////////////////////////
////////////////////////////////////// ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
let req_method = "";
var _wfd = 0;
var _wsd_periodic_proc;
var _wsd_client_fd = 0;
var _sck_periodic_proc;
var _sck_client_fd = 0;


var PREFIX = "WSC  > ";
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////                                                                   //////
//////                                                                   //////
//////                           Entry Point                             //////
//////                                                                   //////
//////                                                                   //////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*****************************************************************************/
/*****************************************************************************/
/*********************************        ************************************/
/*********************************        ************************************/
/*********************************        ************************************/
/*****************************                ********************************/
/*******************************            **********************************/
/*********************************        ************************************/
/************************************   **************************************/
/************************************* ***************************************/
/*****************************************************************************/
var common = require("./__common.js");
var mysql = require("mysql2");

var dbinfo = {
  host: "192.168.0.178",
  user: "crl",
  password: "00000000"
};

var conn = mysql.createConnection(dbinfo);
var myconn = 0;
function onConnCallback(err)
{
  if ( err) throw err;
  console.log(
    "+-------------------------+\r\n" +
    "|                         |\r\n" +
    "| " + dbinfo.host + " Connected |\r\n" +
    "|                         |\r\n" +
    "+-------------------------+\r\n");
  myconn = 1;
}

conn.connect(onConnCallback);


function onQueryCallback(err, result)
{
  if (err) throw err;
  console.log(PREFIX + "Result : " + result);
}





// var httpd = require("./out/liteio_httpd_x86_64.node");
// console.log("################################################################################");
// console.log("#                                                                              #");
// console.log("#                                                                              #");
// console.log("#                                httpd START                                   #");
// console.log("#                                                                              #");
// console.log("#                                                                              #");
// console.log("################################################################################");
// httpd_fd = httpd.open("--httpd_port 80 --httpd_home /opt/htdocs --httpd_index index.html --httpd_size_of_buffer 1024", httpd_callback);


// console.log("################################################################################");
// console.log("################################################################################");
// console.log("################################################################################");
// console.log("################################################################################");
// console.log("################################################################################");



/******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

var wsd = require("./out/liteio_websocket_x86_64.node");
console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                               websocket START                                #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
wsd_fd = wsd.open("--websocket_url http://127.0.0.1:50080/ --websocket_cstype CLIENT --websocket_size_of_buffer 1024 --websocket_callback_id 0 --websocket_timeout 4000", wsd_callback);


//--m console --d WAAS_SRT2 --s WAAS_SRT2 --exec websocket --log d:\waas\htdocs\logc,M2  --websocket_url http://127.0.0.1:50080/ --websocket_cstype CLIENT --websocket_size_of_buffer 1024 --websocket_callback_id 0 --websocket_timeout 4000

//--m console --d WAAS_SRT2 --s WAAS_SRT2 --exec websocket,socket --log d:\waas\htdocs\log,M2 --websocket_url http://127.0.0.1:50080/ --websocket_cstype SERVER --websocket_size_of_buffer 1024 --websocket_callback_id 4 --socket_ip 127.0.0.1 --socket_port 50005 --socket_cstype SERVER --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048 --socket_callback_id 3

function toHex(v)
{
  var _v = 0;
  if ( v < 0 ) _v = 0xFFFFFFFF + v + 1;
  //return _v.toString(16).toUpperCase();
  return _v;
}
var seq = 0;


function PAD(n, width) {
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
}

function HEX(n)
{
  return n.toString(16).padStart(2, 0);
}

function wsd_callback(fd, buf, sz)
{
  var dbg = "";

  if ( sz < 0 )
  {
    if ( toHex(sz) == 0xE000FD0A ) _wfd = fd;
  }
  if ( sz == undefined) return;
  if ( buf == undefined ) return;

  for ( i=0 ; i<sz ; i++ )
  {
    dbg += HEX(buf[i]) + " ";
  }

  console.log(PREFIX + "wsd_callback(" , _wfd , "," , dbg , "," , sz , ")");
  if ( myconn == 1 )
  {
    sql = "insert into litedb.litesample(msg) values ('" + dbg + "')";
    console.log(PREFIX + sql);
    conn.query(sql, onQueryCallback);
    conn.query("commit", onQueryCallback);
  }

  return;
}


function wsd_periodic_proc(obj)
{
  if ( _wfd > 0)
  {
    err = wsd.write(parseInt(_wfd, 10), "ABCD", 4);
    console.log(PREFIX + err, " = wsd.write : ", parseInt(_wfd, 10));
  }
  clearTimeout(_wsd_periodic_proc)
  _wsd_periodic_proc = setTimeout(wsd_periodic_proc, 1000, obj);
}

console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                             PERIODIC START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
_wsd_periodic_proc = setTimeout(wsd_periodic_proc, 4000, 0);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/******************************************************************************/




/******************************************************************************
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////



var sck = require("./out/liteio_socket_x86_64.node");
console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                               socket START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
//sck_fd = sck.open("--socket_ip 127.0.0.1 --socket_port 49243 --socket_cstype CLENT --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048", sck_callback);
sck_fd = sck.open("--socket_ip 127.0.0.1 --socket_port 50005 --socket_cstype CLENT --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048", sck_callback);


function sck_callback(fd, buf, sz)
{

  return;
}

function sck_periodic_proc(obj)
{
  console.log("write to bsocket");

  var  wsFrame = new Uint8Array(128);
  var  i = 0;
  var  sz = i;

  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;

  wsFrame[i] = 0x00; i++;

  sz = i;
  err = sck.write(parseInt(sck_fd, 10), wsFrame.buffer, sz);
  console.log(err, " = sck.write : ", parseInt(sck_fd, 10));

  clearTimeout(_sck_periodic_proc)
  _sck_periodic_proc = setTimeout(sck_periodic_proc, 1000, obj);
}

console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                             PERIODIC START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
_sck_periodic_proc = setTimeout(sck_periodic_proc, 4000, 0);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
******************************************************************************/