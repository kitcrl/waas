///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
////////////////////////////////              /////////////////////////////////
///////////////////////////                         ///////////////////////////
////////////////////////////                      /////////////////////////////
//////////////////////////////                  ///////////////////////////////
////////////////////////////////              /////////////////////////////////
//////////////////////////////////          ///////////////////////////////////
////////////////////////////////////     //////////////////////////////////////
////////////////////////////////////// ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
let req_method = "";
var _wsd_periodic_proc;
var _wsd_client_fd = 0;
var _sck_periodic_proc;
var _sck_client_fd = 0;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////                                                                   //////
//////                                                                   //////
//////                           Entry Point                             //////
//////                                                                   //////
//////                                                                   //////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*****************************************************************************/
/*****************************************************************************/
/*********************************        ************************************/
/*********************************        ************************************/
/*********************************        ************************************/
/*****************************                ********************************/
/*******************************            **********************************/
/*********************************        ************************************/
/************************************   **************************************/
/************************************* ***************************************/
/*****************************************************************************/
var common = require("./__common.js");



// var httpd = require("./out/liteio_httpd_x86_64.node");
// console.log("################################################################################");
// console.log("#                                                                              #");
// console.log("#                                                                              #");
// console.log("#                                httpd START                                   #");
// console.log("#                                                                              #");
// console.log("#                                                                              #");
// console.log("################################################################################");
// httpd_fd = httpd.open("--httpd_port 80 --httpd_home /opt/htdocs --httpd_index index.html --httpd_size_of_buffer 1024", httpd_callback);


// console.log("################################################################################");
// console.log("################################################################################");
// console.log("################################################################################");
// console.log("################################################################################");
// console.log("################################################################################");

// var wsd = require("./out/liteio_websocket_x86_64.node");
// console.log("################################################################################");
// console.log("#                                                                              #");
// console.log("#                                                                              #");
// console.log("#                               websocket START                                #");
// console.log("#                                                                              #");
// console.log("#                                                                              #");
// console.log("################################################################################");
// wsd_fd = wsd.open("--websocket_url http://127.0.0.1:8090/ --websocket_cstype SERVER --websocket_size_of_buffer 1024", wsd_callback);


var sck = require("./out/liteio_socket_x86_64.node");
console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                               socket START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
//sck_fd = sck.open("--socket_ip 127.0.0.1 --socket_port 49243 --socket_cstype CLENT --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048", sck_callback);
sck_fd = sck.open("--socket_ip 127.0.0.1 --socket_port 50005 --socket_cstype CLENT --socket_protocol TCP --socket_casttype UNICAST --socket_size_of_buffer 2048", sck_callback);


function toHex(v)
{
  var _v = 0;
  if ( v < 0 ) _v = 0xFFFFFFFF + v + 1;
  //return _v.toString(16).toUpperCase();
  return _v;
}
var seq = 0;


function sck_callback(fd, buf, sz)
{

  return;
}

function sck_periodic_proc(obj)
{
  console.log("write to bsocket");

  var  wsFrame = new Uint8Array(128);
  var  i = 0;
  var  sz = i;

  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;
  wsFrame[i] = Math.floor(Math.random()*10)<<4 | Math.floor(Math.random()*10); i++;

  wsFrame[i] = 0x00; i++;

  sz = i;
  err = sck.write(parseInt(sck_fd, 10), wsFrame.buffer, sz);
  console.log(err, " = sck.write : ", parseInt(sck_fd, 10));

  clearTimeout(_sck_periodic_proc)
  _sck_periodic_proc = setTimeout(sck_periodic_proc, 1000, obj);
}

console.log("################################################################################");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("#                             PERIODIC START                                   #");
console.log("#                                                                              #");
console.log("#                                                                              #");
console.log("################################################################################");
_sck_periodic_proc = setTimeout(sck_periodic_proc, 4000, 0);
